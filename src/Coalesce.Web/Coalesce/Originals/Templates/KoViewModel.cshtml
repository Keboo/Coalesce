@inherits IntelliTect.Coalesce.Templating.CoalesceTemplate
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@{
    ClassViewModel model = Model.Model;
    string moduleName = "ViewModels";
    string listModuleName = "ListViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        moduleName = Model.AreaName + "." + moduleName;
        listModuleName = Model.AreaName + "." + listModuleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
}

/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: @(model.Name)
// Auto Generated by IntelliTect.Coalesce

module @moduleName {

	export class @(model.ViewModelGeneratedClassName) extends Coalesce.BaseViewModel<@(model.ViewModelClassName)>
    {
        protected modelName = "@(model.Name)";
        protected primaryKeyName = "@(model.PrimaryKey.JsVariable)";
        protected modelDisplayName = "@(model.DisplayName)";

        protected apiController = "/@(model.ApiName)";
        protected viewController = "/@(model.ControllerName)";
    
        /** 
            The enumeration of all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.@(model.Name)DataSources = ListViewModels.@(model.Name)DataSources;

        /**
            The data source on the server to use when retrieving the object.
            Valid values are in this.dataSources.
        */
        public dataSource: ListViewModels.@(model.Name)DataSources = ListViewModels.@(model.Name)DataSources.Default;

        /** Behavioral configuration for all instances of @(model.ViewModelClassName). Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<@(model.ViewModelClassName)>
            = new Coalesce.ViewModelConfiguration<@(model.ViewModelClassName)>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current @(model.ViewModelClassName) instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<@(model.ViewModelClassName)>
            = new Coalesce.ViewModelConfiguration<@(model.ViewModelClassName)>(@(model.ViewModelClassName).coalesceConfig);
    
        // Observables
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.HasViewModelProperty))
        {
        if (prop.Comment.Length > 0)
        {
        @:/** @(prop.Comment) */
        }
        @:public @(prop.JsVariable): @(prop.Type.TsKnockoutType) = @(prop.Type.JsKnockoutType);
        if (prop.Type.IsEnum || (prop.Type.IsNullable && prop.PureType.IsEnum))
        {
        @:/** Text value for enumeration @prop.Name */
        @:public @(prop.JsTextPropertyName): KnockoutComputed<string> = ko.pureComputed(() => {
            @:for(var i = 0; i < this.@(prop.JsVariable)Values.length; i++){
                @:if (this.@(prop.JsVariable)Values[i].id == this.@(prop.JsVariable)()){
                    @:return this.@(prop.JsVariable)Values[i].value;
                @:}
            @:}
        @:});
        }
        if (prop.IsManytoManyCollection)
        {
        if (prop.Comment.Length > 0)
        {
        @:/** Collection of related objects for many-to-many relationship @prop.ManyToManyCollectionName via @prop.Name */
        }
        @:public @(prop.ManyToManyCollectionName.ToCamelCase()): KnockoutObservableArray<ViewModels.@(prop.ManyToManyCollectionProperty.Object.ViewModelClassName)> = ko.observableArray([]);
        }
        }

       
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsInternalUse))
        {
        @:/** Display text for @(prop.Name) */
        @:public @prop.JsTextPropertyName: KnockoutComputed<string>;
        }
        
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
        {
        <text>
        /** Add object to @(prop.JsVariable) */
        public addTo@(prop.Name) = (autoSave = true): @prop.PureType.ClassViewModel.Name => {
            var newItem = new @(prop.Object.ViewModelClassName)();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.@prop.JsVariable;
            newItem.isExpanded(true);
            @if (prop.HasInverseProperty)
            {
            @:newItem.@(prop.InverseIdProperty.JsVariable)(this.@(model.PrimaryKey.JsVariable)());
            }
            else if (prop.Object.PropertyByName(model.PrimaryKey.JsVariable) != null)
            {
            @:newItem.@(model.PrimaryKey.JsVariable)(this.@(model.PrimaryKey.JsVariable)());
            }
            this.@(prop.JsVariable).push(newItem);
            return newItem;
        };

        /** ListViewModel for @(prop.Name). Allows for loading subsets of data. */
        public @(prop.JsVariable)List: (loadImmediate?: boolean) => @(listModuleName).@(prop.Object.ListViewModelClassName);
        </text>
        }

        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && !f.IsInternalUse && f.PureTypeOnContext))
        {
        @:/** Url for a table view of all members of collection @prop.Name for the current object. */
        @:public @(prop.ListEditorUrlName): KnockoutComputed<string> = ko.computed({
            @:read: () => {
                if (prop.ListEditorUrl == null)
                {
                    @:return "Inverse property not set on @(model.Name) for property @(prop.Name)";
                }
                else
                {
                    @: return this.coalesceConfig.baseViewUrl() + '/@(prop.ListEditorUrl)' + this.@(model.PrimaryKey.JsVariable)();
                }
            @:},
            @:deferEvaluation: true
        @:});
        }

        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsInternalUse))
        {
        @:/** Pops up a stock editor for object @prop.JsVariable */
        @:public show@(prop.Name)Editor: (callback?: any) => void;
        }


        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:/** Array of all possible names & values of enum @prop.JsVariable */
        @:public @(prop.JsVariable)Values: EnumValue[] = [ 
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:{ id: @kvp.Key, value: '@kvp.Value.ToProperCase()' },
        }
        @:];
        }

        @foreach (var method in model.Methods.Where(m => m.IsClientMethod && (!m.IsStatic || m.ReturnType.Name == model.Name)))
        {
        @:
        @:
        @:/**
        @:    Invoke server method @method.Name.
        if (method.Comment.Length > 0)
        {
        @:    @(method.Comment)
        }
        @:*/
        @:public @method.JsVariable = (@method.TsParameters): JQueryPromise<any> => {
        <text>
            this.@(method.JsVariableIsLoading)(true);
            this.@(method.JsVariableMessage)('');
            this.@(method.JsVariableWasSuccessful)(null);
            return $.ajax({ method: "POST",
                        url: this.coalesceConfig.baseApiUrl() + "/@(method.ApiUrl)",
                        data: @method.JsPostObject,
                        xhrFields: { withCredentials: true } })
            .done((data) => {
                this.isDirty(false);
				this.@(method.JsVariableResultRaw)(data.object);
                this.@(method.JsVariableMessage)('');
                this.@(method.JsVariableWasSuccessful)(true);
            @if (method.ReturnType.IsCollection && method.ReturnType.PureType.HasClassViewModel)
            {
                @:if (this.@(method.JsVariableResult)()){
   				// Merge the incoming array
                    @if (method.ReturnType.PureType.ClassViewModel.PrimaryKey != null)
                    {
                        @:Coalesce.KnockoutUtilities.RebuildArray(this.@(method.JsVariableResult), data.object, '@method.ReturnType.PureType.ClassViewModel.PrimaryKey.JsVariable', ViewModels.@method.ReturnType.PureType.ClassViewModel.Name, this, true);
                    }
                    else if (method.ReturnType.PureType.IsPrimitive)
                    {
                        @:this.@(method.JsVariableResult)(data.object);
                    }
                    else
                    {
                        @:Coalesce.KnockoutUtilities.RebuildArray(this.@(method.JsVariableResult), data.object, null, ViewModels.@method.ReturnType.PureType.ClassViewModel.Name, this, true);
                    }
                @:}
            }
            else if (method.ReturnType.IsPOCO && method.ReturnType.HasClassViewModel)
            {
                @:if (!this.@(method.JsVariableResult)()){
                    @:this.@(method.JsVariableResult)(new @(method.ReturnType.ClassViewModel.ViewModelClassName)(data.object));
                @:} else {
                    @:this.@(method.JsVariableResult)().loadFromDto(data.object);
                @:}
            }
            else
            {
                @:this.@(method.JsVariableResult)(data.object);
            }

                @if (method.ReturnType.Name == method.Parent.Name)
                {
                @:// The return type is the type of the object, load it.
                @:this.loadFromDto(data.object, true)
                @:if ($.isFunction(callback)) {
                    @:callback();
                @:}
                }
                else
                {
                @:if (reload) {
                @:  this.load(null, callback);
                @:} else if ($.isFunction(callback)) {
                @:  callback();
                @:}
                }
            })
            .fail((xhr) => {
                var errorMsg = "Unknown Error";
                if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                this.@(method.JsVariableWasSuccessful)(false);
                this.@(method.JsVariableMessage)(errorMsg);
    
                if (this.coalesceConfig.showFailureAlerts())
                    this.coalesceConfig.onFailure()(this as any, "Could not call method @method.JsVariable: " + errorMsg);
            })
            .always(() => {
                this.@(method.JsVariableIsLoading)(false);
            });
        } </text>
        @:/** Result of server method (@method.Name) strongly typed in a observable. */
        @:public @method.JsVariableResult: @method.ReturnType.TsKnockoutType = @method.ReturnType.JsKnockoutType;
        @:/** Raw result object of server method (@method.Name) simply wrapped in an observable. */
        @:public @method.JsVariableResultRaw: KnockoutObservable<any> = ko.observable();
        @:/** True while the server method (@method.Name) is being called */
        @:public @method.JsVariableIsLoading: KnockoutObservable<boolean> = ko.observable(false);
        @:/** Error message for server method (@method.Name) if it fails. */
        @:public @method.JsVariableMessage: KnockoutObservable<string> = ko.observable(null);
        @:/** True if the server method (@method.Name) was successful. */
        @:public @method.JsVariableWasSuccessful: KnockoutObservable<boolean> = ko.observable(null);
        @:/** Presents a series of input boxes to call the server method (@method.Name) */
        @:public @method.JsVariableUi = (callback: () => void = null, reload: boolean = true): JQueryPromise<any> => {
        @foreach (var param in method.ClientParameters.Where(f => f.ConvertsFromJsString))
        {
            @:var @param.Name: @param.Type.TsType = @param.Type.TsConvertFromString($"prompt('{param.Name.ToProperCase()}')");
        }
        @foreach (var param in method.ClientParameters.Where(f => !f.ConvertsFromJsString))
        {
            @:var @param.Name: @param.Type.TsType = null;
        }
            @:return this.@(method.JsVariable)(@(method.JsArguments("", true)), reload);
        @:}
        @:/** Presents a modal with input boxes to call the server method (@method.Name). Depends on a modal existing with id #method-@method.Name. */
        @:public @method.JsVariableModal = (callback: () => void = null, reload: boolean = true) => {
            @if (method.ClientParameters.Any()) {
            @:$('#method-@method.Name').modal();
            @:$('#method-@method.Name').on('shown.bs.modal', () => {
                @:$('#method-@method.Name .btn-ok').unbind('click');
                @:$('#method-@method.Name .btn-ok').click(() => {
                    @:this.@(method.JsVariableWithArgs)(null, callback, reload);
                    @:$('#method-@method.Name').modal('hide');
                @:});
            @:});
            }
            else
            {
            @:this.@(method.JsVariableUi)(callback, reload);
            }
        @:}
        @if (method.ClientParameters.Any())
        {
        @:/** Calls server method (@method.Name) with an instance of @(model.ViewModelGeneratedClassName).@(method.ArgsName), or the value of @(method.JsVariableArgs) if not specified. */
        @:public @method.JsVariableWithArgs = (args?: @(model.ViewModelGeneratedClassName).@(method.ArgsName), callback?: () => void, reload: boolean = true) => {
            @:if (!args) args = this.@(method.JsVariableArgs);
            @:return this.@(method.JsVariable)(@(method.JsArguments("args", true)), reload);
        @:}
        @:/** Object that can be easily bound to fields to allow data entry for the method */
        @:public @(method.JsVariableArgs) = new @(model.ViewModelGeneratedClassName).@(method.ArgsName)(); 
        }
        @:
        }

        /** 
            Load the ViewModel object from the DTO. 
            @@param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @@param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true) => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.@(model.PrimaryKey.JsonName);
            this.@(model.PrimaryKey.JsVariable)(data.@(model.PrimaryKey.JsonName));
            // Load the lists of other objects
        @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.Type.IsCollection && p.HasViewModel))
        { 
            @:if (data.@prop.JsonName != null) {
            @if (prop.Object.PrimaryKey != null)
            {
                @:// Merge the incoming array
                @:Coalesce.KnockoutUtilities.RebuildArray(this.@prop.JsVariable, data.@prop.JsonName, '@prop.Object.PrimaryKey.JsonName', @prop.Object.ViewModelClassName, this, allowCollectionDeletes);
                if (prop.IsManytoManyCollection)
                {
                @:// Add many-to-many collection
                @:var objs = [];
                @:$.each(data.@prop.JsonName, (index, item) => {
                    @:if (item.@prop.ManyToManyCollectionProperty.JsonName){
                        @:objs.push(item.@prop.ManyToManyCollectionProperty.JsonName);
                    @:}
                @:});
                @:Coalesce.KnockoutUtilities.RebuildArray(this.@(prop.ManyToManyCollectionName.ToCamelCase()), objs, '@prop.ManyToManyCollectionProperty.ObjectIdProperty.JsVariable', @prop.ManyToManyCollectionProperty.Object.ViewModelClassName, this, allowCollectionDeletes);
                }
            }
            else if (prop.PureType.IsPrimitive)
            {
                @:this.@(prop.JsVariable)(data.@prop.JsVariable);
            }
            else
            {
                @:Coalesce.KnockoutUtilities.RebuildArray(this.@prop.JsVariable, data.@prop.JsonName, null, @prop.Object.ViewModelClassName, this, allowCollectionDeletes);
            }
            @:} 
        }
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && p.IsPOCO && !p.Type.IsCollection && !p.IsComplexType && !p.IsInternalUse))
            {
            @:if (!data.@prop.JsonName) { 
                if (prop.ObjectIdProperty != null) {
                @:if (data.@prop.ObjectIdProperty.JsonName != this.@(prop.ObjectIdProperty.JsVariable)()) {
                    @:this.@(prop.JsVariable)(null);
                @:}
                }else{
                @:this.@(prop.JsVariable)(null);
                }
            @:}else {
                @:if (!this.@(prop.JsVariable)()){
                    @:this.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(data.@prop.JsonName, this));
                @:}else{
                    @:this.@(prop.JsVariable)().loadFromDto(data.@prop.JsonName);
                @:}
                @if (prop.Object.OnContext) { 
                @:if (this.parent && this.parent.myId == this.@(prop.JsVariable)().myId && Coalesce.Utilities.getClassName(this.parent) == Coalesce.Utilities.getClassName(this.@(prop.JsVariable)()))
                @:{
                    @:this.parent.loadFromDto(data.@prop.JsonName, undefined, false);
                @:}
                }
            @:}
            }

            // The rest of the objects are loaded now.
            @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
            {
            if (prop.Type.IsDate)
            { 
            @:if (data.@prop.JsonName == null) this.@(prop.JsVariable)(null);
            @:else if (this.@(prop.JsVariable)() == null || !this.@(prop.JsVariable)().isSame(moment(data.@prop.JsonName))){
                @:this.@(prop.JsVariable)(moment(data.@prop.JsonName));
            @:}
            } else if (!prop.IsPOCO && !prop.IsPrimaryKey) {
            @:this.@(prop.JsVariable)(data.@prop.JsonName);
            }
            }
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            this.validate();
        };

        /** Save the object into a DTO */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.@(model.Properties.First(f=>f.IsPrimaryKey).JsonName) = this.@(model.Properties.First(f=>f.IsPrimaryKey).JsVariable)();

            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.CanWrite && !f.IsPOCO && f.HasViewModelProperty || f.IsComplexType))
            {
            if (prop.Type.IsDateTimeOffset)
            {
            @:if (!this.@(prop.JsVariable)()) dto.@prop.Name = null;
            @:else dto.@prop.JsonName = this.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ssZZ');
            }
            else if (prop.Type.IsDateTime)
            { 
            @:if (!this.@(prop.JsVariable)()) dto.@prop.Name = null;
            @:else dto.@prop.JsonName = this.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ss');
            }
            else if (prop.IsComplexType) 
            {
            @:// Complex Type: @prop.Name>
            @:dto.@(prop.JsonName)={};
            foreach (PropertyViewModel subProp in prop.Object.Properties.Where(p=>p.CanRead && !p.HasValidValues && !p.Type.IsCollection && p.HasViewModelProperty))
            {
            @:dto.@(prop.JsonName).@(subProp.JsonName) = this.@(prop.JsVariable)().@(subProp.JsVariable)();
            }
            }
            else if (prop.IsForeignKey)
            {
            @:dto.@prop.JsonName = this.@(prop.JsVariable)();
            if (prop.IdPropertyObjectProperty != null && !prop.IsPrimaryKey)
            {
            // If the Id isn't set, use the object and see if that is set. Allows a child to get an Id after the fact. 
            @:if (!dto.@prop.JsonName && this.@(prop.IdPropertyObjectProperty.JsVariable)()) {
                @:dto.@prop.JsonName = this.@(prop.IdPropertyObjectProperty.JsVariable)().@(prop.IdPropertyObjectProperty.Object.PrimaryKey.JsVariable)();
            @:}
            }
            }
            else if (!prop.Type.IsCollection)
            {
            @:dto.@prop.JsonName = this.@(prop.JsVariable)();
            }
            }

            return dto;
        }


        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty))
            {
                var validationProperties = prop.ClientValidationKnockoutJs;
                if (validationProperties != string.Empty || prop.Type.IsDate)
                {
			@:self.@prop.JsVariable = self.@(prop.JsVariable).extend({ @(prop.Type.IsDate ? "moment: { unix: true }, " : "")@prop.ClientValidationKnockoutJs });
                }
            }
            
            self.errors = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && !p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);
            self.warnings = ko.validation.group([
            @foreach (PropertyViewModel prop in model.Properties.Where(p => p.HasViewModelProperty && p.ClientValidationAllowSave))
            {
                @:self.@(prop.JsVariable),
            }
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.coalesceConfig.baseViewUrl() + self.viewController + "/CreateEdit?id=" + self.@(model.PrimaryKey.JsVariable)();
            });

            // Create computeds for display for objects
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.IsComplexType && !f.IsInternalUse))
            {
			@:self.@prop.JsTextPropertyName = ko.computed(function()
			@:{   // If the object exists, use the text value. Otherwise show 'None'
				@:if (self.@(prop.JsVariable)() && self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)()) {
					@:return self.@(prop.JsVariable)().@(prop.Object.ListTextProperty.JsVariable)().toString();
				@:} else {
					@:return "None";
				@:}
			@:});
            }

    
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsCollection && f.HasViewModelProperty && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
            @:// List Object model for @(prop.Name). Allows for loading subsets of data.
            @:var _@(prop.JsVariable)List: @(listModuleName).@(prop.Object.ListViewModelClassName) = null;
            @:self.@(prop.JsVariable)List = function(loadImmediate = true) {
                @:if (!_@(prop.JsVariable)List){
                    @:_@(prop.JsVariable)List = new @(listModuleName).@(prop.Object.ListViewModelClassName)();
                    @:if (loadImmediate) load@(prop.Name)List();
                    @:self.@(prop.Parent.PrimaryKey.JsVariable).subscribe(load@(prop.Name)List)
                @:}
                @:return _@(prop.JsVariable)List;
            @:}

            @:function load@(prop.Name)List() {
                @:if (self.@(prop.Parent.PrimaryKey.JsVariable)()){
                    if (prop.InverseIdProperty != null)
                    {
                    @:_@(prop.JsVariable)List.queryString = "@(prop.InverseIdProperty.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    else {
                    @:_@(prop.JsVariable)List.queryString = "@(model.PrimaryKey.Name)=" + self.@(prop.Parent.PrimaryKey.JsVariable)();
                    }
                    @:_@(prop.JsVariable)List.load();
                @:}
            @:}
            }


            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && f.HasViewModel && f.PureType.ClassViewModel.HasDbSet && !f.IsInternalUse))
            {
            @:self.show@(prop.Name)Editor = function(callback: any) {
                @:if (!self.@(prop.JsVariable)()) {
                    @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)());
                @:}
                @:self.@(prop.JsVariable)().showEditor(callback)
            @:};
            }

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
            @foreach (PropertyViewModel prop in model.Properties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsComplexType && !f.IsInternalUse && !f.IsReadOnly && !f.HasNotMapped))
            {
                @:// See if self.@(prop.JsVariable) needs to be loaded.
                @:if (self.@(prop.JsVariable)() == null && self.@(prop.ObjectIdProperty.JsVariable)() != null){
                    @:loadingCount++;
                    @:var @(prop.JsVariable)Obj = new @(prop.Object.ViewModelClassName)();
                    @:@(prop.JsVariable)Obj.load(self.@(prop.ObjectIdProperty.JsVariable)(), function() {
                        @:loadingCount--;
                        @:self.@(prop.JsVariable)(@(prop.JsVariable)Obj);
                        @:if (loadingCount == 0 && $.isFunction(callback)){
                            @:callback();
                        @:}
                    @:});
                @:}
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables
            @foreach (PropertyViewModel prop in model.Properties.Where(f=>f.IsComplexType && !f.IsInternalUse))
            {
            @:self.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(self));
            }

        @foreach (PropertyViewModel prop in model.Properties.Where(p=>p.CanWrite && !p.IsManytoManyCollection && !p.Type.IsCollection && p.HasViewModelProperty))
        {
            @:self.@(prop.JsVariable).subscribe(self.autoSave);
        }
        @foreach (PropertyViewModel prop in model.Properties.Where(p => p.IsManytoManyCollection && !p.IsInternalUse))
        {
            <text>
            self.@(prop.ManyToManyCollectionName.ToCamelCase()).subscribe(function(changes){
                if (!self.isLoading() && changes.length > 0){
                    for (var i in changes){
                        var change:any = changes[i];
                        self.autoSaveCollection('@(prop.ManyToManyCollectionName.ToCamelCase())', change.value.@(prop.ManyToManyCollectionProperty.Object.PrimaryKey.JsVariable)(), change.status);
                    }
                }
            }, null, "arrayChange");
            </text>
        }

            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace @(model.ViewModelGeneratedClassName) {
        @foreach (PropertyViewModel prop in model.Properties.Where(f => f.Type.IsEnum || (f.Type.IsNullable && f.PureType.IsEnum)))
        {
        @:export enum @(prop.Name)Enum {
        @foreach (var kvp in prop.Type.EnumValues)
        {
            @:@kvp.Value = @kvp.Key,
        }
        @:};
        }

        // Classes for use in method calls to support data binding for input for arguments
        @foreach(MethodViewModel method in model.Methods.Where(f => f.ClientParameters.Any() && (!f.IsStatic || f.ReturnType.Name == model.Name) && f.IsClientMethod)){
        @:export class @(method.ArgsName) {
            @foreach (var arg in method.ClientParameters)
            {
            @:public @(arg.CsArgumentName): @(arg.Type.TsKnockoutType) = @(arg.Type.JsKnockoutType);
            }
        @:}
        }
    }
}