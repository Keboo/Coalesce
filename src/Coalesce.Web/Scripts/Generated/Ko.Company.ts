
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: Company
// Auto Generated by IntelliTect.Coalesce

module ViewModels {

	export class Company extends Coalesce.BaseViewModel<Company>
    {
        protected modelName = "Company";
        protected primaryKeyName = "companyId";
        protected modelDisplayName = "Company";

        protected apiController = "/Company";
        protected viewController = "/Company";
    
        /** 
            The enumeration of all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.CompanyDataSources = ListViewModels.CompanyDataSources;

        /**
            The data source on the server to use when retrieving the object.
            Valid values are in this.dataSources.
        */
        public dataSource: ListViewModels.CompanyDataSources = ListViewModels.CompanyDataSources.Default;

        /** Behavioral configuration for all instances of Company. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<Company>
            = new Coalesce.ViewModelConfiguration<Company>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current Company instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<Company>
            = new Coalesce.ViewModelConfiguration<Company>(Company.coalesceConfig);
    
        // Observables
        public companyId: KnockoutObservable<number> = ko.observable(null);
        public name: KnockoutObservable<string> = ko.observable(null);
        public address1: KnockoutObservable<string> = ko.observable(null);
        public address2: KnockoutObservable<string> = ko.observable(null);
        public city: KnockoutObservable<string> = ko.observable(null);
        public state: KnockoutObservable<string> = ko.observable(null);
        public zipCode: KnockoutObservable<string> = ko.observable(null);
        public employees: KnockoutObservableArray<ViewModels.Person> = ko.observableArray([]);
        public altName: KnockoutObservable<string> = ko.observable(null);

       
        

        /** Add object to employees */
        public addToEmployees = (autoSave = true): Person => {
            var newItem = new Person();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.employees;
            newItem.isExpanded(true);
            newItem.companyId(this.companyId());
            this.employees.push(newItem);
            return newItem;
        };

        /** ListViewModel for Employees. Allows for loading subsets of data. */
        public employeesList: (loadImmediate?: boolean) => ListViewModels.PersonList;
        
        /** Url for a table view of all members of collection Employees for the current object. */
        public employeesListUrl: KnockoutComputed<string> = ko.computed({
            read: () => {
                     return this.coalesceConfig.baseViewUrl() + '/Person/Table?companyId=' + this.companyId();
            },
            deferEvaluation: true
        });





        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true) => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.companyId;
            this.companyId(data.companyId);
            // Load the lists of other objects
            if (data.employees != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.employees, data.employees, 'personId', Person, this, allowCollectionDeletes);
            } 
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.

            // The rest of the objects are loaded now.
            this.name(data.name);
            this.address1(data.address1);
            this.address2(data.address2);
            this.city(data.city);
            this.state(data.state);
            this.zipCode(data.zipCode);
            this.altName(data.altName);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            this.validate();
        };

        /** Save the object into a DTO */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.companyId = this.companyId();

            dto.name = this.name();
            dto.address1 = this.address1();
            dto.address2 = this.address2();
            dto.city = this.city();
            dto.state = this.state();
            dto.zipCode = this.zipCode();

            return dto;
        }


        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
            
            self.errors = ko.validation.group([
                self.companyId,
                self.name,
                self.address1,
                self.address2,
                self.city,
                self.state,
                self.zipCode,
                self.employees,
                self.altName,
            ]);
            self.warnings = ko.validation.group([
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.coalesceConfig.baseViewUrl() + self.viewController + "/CreateEdit?id=" + self.companyId();
            });

            // Create computeds for display for objects

    
            // List Object model for Employees. Allows for loading subsets of data.
            var _employeesList: ListViewModels.PersonList = null;
            self.employeesList = function(loadImmediate = true) {
                if (!_employeesList){
                    _employeesList = new ListViewModels.PersonList();
                    if (loadImmediate) loadEmployeesList();
                    self.companyId.subscribe(loadEmployeesList)
                }
                return _employeesList;
            }
            function loadEmployeesList() {
                if (self.companyId()){
                    _employeesList.queryString = "CompanyId=" + self.companyId();
                    _employeesList.load();
                }
            }



            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables

            self.name.subscribe(self.autoSave);
            self.address1.subscribe(self.autoSave);
            self.address2.subscribe(self.autoSave);
            self.city.subscribe(self.autoSave);
            self.state.subscribe(self.autoSave);
            self.zipCode.subscribe(self.autoSave);
        
            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace Company {

        // Classes for use in method calls to support data binding for input for arguments
    }
}