
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: Person
// Auto Generated by IntelliTect.Coalesce

module ViewModels {

	export class Person extends Coalesce.BaseViewModel<Person>
    {
        protected modelName = "Person";
        protected primaryKeyName = "personId";
        protected modelDisplayName = "Person";

        protected apiController = "/Person";
        protected viewController = "/Person";
    
        /** 
            The enumeration of all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.PersonDataSources = ListViewModels.PersonDataSources;

        /**
            The data source on the server to use when retrieving the object.
            Valid values are in this.dataSources.
        */
        public dataSource: ListViewModels.PersonDataSources = ListViewModels.PersonDataSources.Default;

        /** Behavioral configuration for all instances of Person. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<Person>
            = new Coalesce.ViewModelConfiguration<Person>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current Person instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<Person>
            = new Coalesce.ViewModelConfiguration<Person>(Person.coalesceConfig);
    
        // Observables
        /** ID for the person object. */
        public personId: KnockoutObservable<number> = ko.observable(null);
        /** Title of the person, Mr. Mrs, etc. */
        public title: KnockoutObservable<number> = ko.observable(null);
        /** Text value for enumeration Title */
        public titleText: KnockoutComputed<string> = ko.pureComputed(() => {
            for(var i = 0; i < this.titleValues.length; i++){
                if (this.titleValues[i].id == this.title()){
                    return this.titleValues[i].value;
                }
            }
        });
        /** First name of the person. */
        public firstName: KnockoutObservable<string> = ko.observable(null);
        /** Last name of the person */
        public lastName: KnockoutObservable<string> = ko.observable(null);
        /** Email address of the person */
        public email: KnockoutObservable<string> = ko.observable(null);
        /** Genetic Gender of the person. */
        public gender: KnockoutObservable<number> = ko.observable(null);
        /** Text value for enumeration Gender */
        public genderText: KnockoutComputed<string> = ko.pureComputed(() => {
            for(var i = 0; i < this.genderValues.length; i++){
                if (this.genderValues[i].id == this.gender()){
                    return this.genderValues[i].value;
                }
            }
        });
        /** List of cases assigned to the person */
        public casesAssigned: KnockoutObservableArray<ViewModels.Case> = ko.observableArray([]);
        /** List of cases reported by the person. */
        public casesReported: KnockoutObservableArray<ViewModels.Case> = ko.observableArray([]);
        public birthDate: KnockoutObservable<moment.Moment> = ko.observable(null);
        public lastBath: KnockoutObservable<moment.Moment> = ko.observable(null);
        public nextUpgrade: KnockoutObservable<moment.Moment> = ko.observable(null);
        public personStatsId: KnockoutObservable<number> = ko.observable(null);
        public personStats: KnockoutObservable<ViewModels.PersonStats> = ko.observable(null);
        public timeZone: KnockoutObservable<any> = ko.observable(null);
        /** Calculated name of the person. eg., Mr. Michael Stokesbary. */
        public name: KnockoutObservable<string> = ko.observable(null);
        /** Company ID this person is employed by */
        public companyId: KnockoutObservable<number> = ko.observable(null);
        /** Company loaded from the Company ID */
        public company: KnockoutObservable<ViewModels.Company> = ko.observable(null);

       
        /** Display text for PersonStats */
        public personStatsText: KnockoutComputed<string>;
        /** Display text for Company */
        public companyText: KnockoutComputed<string>;
        

        /** Add object to casesAssigned */
        public addToCasesAssigned = (autoSave = true): Case => {
            var newItem = new Case();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.casesAssigned;
            newItem.isExpanded(true);
            newItem.assignedToId(this.personId());
            this.casesAssigned.push(newItem);
            return newItem;
        };

        /** ListViewModel for CasesAssigned. Allows for loading subsets of data. */
        public casesAssignedList: (loadImmediate?: boolean) => ListViewModels.CaseList;
        
        /** Add object to casesReported */
        public addToCasesReported = (autoSave = true): Case => {
            var newItem = new Case();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.casesReported;
            newItem.isExpanded(true);
            newItem.reportedById(this.personId());
            this.casesReported.push(newItem);
            return newItem;
        };

        /** ListViewModel for CasesReported. Allows for loading subsets of data. */
        public casesReportedList: (loadImmediate?: boolean) => ListViewModels.CaseList;
        
        /** Url for a table view of all members of collection CasesAssigned for the current object. */
        public casesAssignedListUrl: KnockoutComputed<string> = ko.computed({
            read: () => {
                     return this.coalesceConfig.baseViewUrl() + '/Case/Table?assignedToId=' + this.personId();
            },
            deferEvaluation: true
        });
        /** Url for a table view of all members of collection CasesReported for the current object. */
        public casesReportedListUrl: KnockoutComputed<string> = ko.computed({
            read: () => {
                     return this.coalesceConfig.baseViewUrl() + '/Case/Table?reportedById=' + this.personId();
            },
            deferEvaluation: true
        });

        /** Pops up a stock editor for object personStats */
        public showPersonStatsEditor: (callback?: any) => void;
        /** Pops up a stock editor for object company */
        public showCompanyEditor: (callback?: any) => void;


        /** Array of all possible names & values of enum title */
        public titleValues: EnumValue[] = [ 
            { id: 0, value: 'Mr' },
            { id: 1, value: 'Ms' },
            { id: 2, value: 'Mrs' },
            { id: 4, value: 'Miss' },
        ];
        /** Array of all possible names & values of enum gender */
        public genderValues: EnumValue[] = [ 
            { id: 0, value: 'Non Specified' },
            { id: 1, value: 'Male' },
            { id: 2, value: 'Female' },
        ];

        
        
        /**
            Invoke server method Rename.
            Adds the text to the first name.
        */
        public rename = (addition: String, callback: () => void = null, reload: boolean = true): JQueryPromise<any> => {

            this.renameIsLoading(true);
            this.renameMessage('');
            this.renameWasSuccessful(null);
            return $.ajax({ method: "POST",
                        url: this.coalesceConfig.baseApiUrl() + "/Person/Rename",
                        data: { id: this.myId, addition: addition },
                        xhrFields: { withCredentials: true } })
            .done((data) => {
                this.isDirty(false);
				this.renameResultRaw(data.object);
                this.renameMessage('');
                this.renameWasSuccessful(true);
                if (!this.renameResult()){
                    this.renameResult(new Person(data.object));
                } else {
                    this.renameResult().loadFromDto(data.object);
                }

                // The return type is the type of the object, load it.
                this.loadFromDto(data.object, true)
                if ($.isFunction(callback)) {
                    callback();
                }
            })
            .fail((xhr) => {
                var errorMsg = "Unknown Error";
                if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                this.renameWasSuccessful(false);
                this.renameMessage(errorMsg);
    
                if (this.coalesceConfig.showFailureAlerts())
                    this.coalesceConfig.onFailure()(this as any, "Could not call method rename: " + errorMsg);
            })
            .always(() => {
                this.renameIsLoading(false);
            });
        } 
        /** Result of server method (Rename) strongly typed in a observable. */
        public renameResult: KnockoutObservable<ViewModels.Person> = ko.observable(null);
        /** Raw result object of server method (Rename) simply wrapped in an observable. */
        public renameResultRaw: KnockoutObservable<any> = ko.observable();
        /** True while the server method (Rename) is being called */
        public renameIsLoading: KnockoutObservable<boolean> = ko.observable(false);
        /** Error message for server method (Rename) if it fails. */
        public renameMessage: KnockoutObservable<string> = ko.observable(null);
        /** True if the server method (Rename) was successful. */
        public renameWasSuccessful: KnockoutObservable<boolean> = ko.observable(null);
        /** Presents a series of input boxes to call the server method (Rename) */
        public renameUi = (callback: () => void = null, reload: boolean = true): JQueryPromise<any> => {
            var addition: String = prompt('Addition');
            return this.rename(addition, callback, reload);
        }
        /** Presents a modal with input boxes to call the server method (Rename). Depends on a modal existing with id #method-Rename. */
        public renameModal = (callback: () => void = null, reload: boolean = true) => {
            $('#method-Rename').modal();
            $('#method-Rename').on('shown.bs.modal', () => {
                $('#method-Rename .btn-ok').unbind('click');
                $('#method-Rename .btn-ok').click(() => {
                    this.renameWithArgs(null, callback, reload);
                    $('#method-Rename').modal('hide');
                });
            });
        }
        /** Calls server method (Rename) with an instance of Person.RenameArgs, or the value of renameArgs if not specified. */
        public renameWithArgs = (args?: Person.RenameArgs, callback?: () => void, reload: boolean = true) => {
            if (!args) args = this.renameArgs;
            return this.rename(args.addition(), callback, reload);
        }
        /** Object that can be easily bound to fields to allow data entry for the method */
        public renameArgs = new Person.RenameArgs(); 
        
        
        
        /**
            Invoke server method ChangeSpacesToDashesInName.
            Removes spaces from the name and puts in dashes
        */
        public changeSpacesToDashesInName = (callback: () => void = null, reload: boolean = true): JQueryPromise<any> => {

            this.changeSpacesToDashesInNameIsLoading(true);
            this.changeSpacesToDashesInNameMessage('');
            this.changeSpacesToDashesInNameWasSuccessful(null);
            return $.ajax({ method: "POST",
                        url: this.coalesceConfig.baseApiUrl() + "/Person/ChangeSpacesToDashesInName",
                        data: { id: this.myId },
                        xhrFields: { withCredentials: true } })
            .done((data) => {
                this.isDirty(false);
				this.changeSpacesToDashesInNameResultRaw(data.object);
                this.changeSpacesToDashesInNameMessage('');
                this.changeSpacesToDashesInNameWasSuccessful(true);
                this.changeSpacesToDashesInNameResult(data.object);

                if (reload) {
                  this.load(null, callback);
                } else if ($.isFunction(callback)) {
                  callback();
                }
            })
            .fail((xhr) => {
                var errorMsg = "Unknown Error";
                if (xhr.responseJSON && xhr.responseJSON.message) errorMsg = xhr.responseJSON.message;
                this.changeSpacesToDashesInNameWasSuccessful(false);
                this.changeSpacesToDashesInNameMessage(errorMsg);
    
                if (this.coalesceConfig.showFailureAlerts())
                    this.coalesceConfig.onFailure()(this as any, "Could not call method changeSpacesToDashesInName: " + errorMsg);
            })
            .always(() => {
                this.changeSpacesToDashesInNameIsLoading(false);
            });
        } 
        /** Result of server method (ChangeSpacesToDashesInName) strongly typed in a observable. */
        public changeSpacesToDashesInNameResult: KnockoutObservable<any> = ko.observable(null);
        /** Raw result object of server method (ChangeSpacesToDashesInName) simply wrapped in an observable. */
        public changeSpacesToDashesInNameResultRaw: KnockoutObservable<any> = ko.observable();
        /** True while the server method (ChangeSpacesToDashesInName) is being called */
        public changeSpacesToDashesInNameIsLoading: KnockoutObservable<boolean> = ko.observable(false);
        /** Error message for server method (ChangeSpacesToDashesInName) if it fails. */
        public changeSpacesToDashesInNameMessage: KnockoutObservable<string> = ko.observable(null);
        /** True if the server method (ChangeSpacesToDashesInName) was successful. */
        public changeSpacesToDashesInNameWasSuccessful: KnockoutObservable<boolean> = ko.observable(null);
        /** Presents a series of input boxes to call the server method (ChangeSpacesToDashesInName) */
        public changeSpacesToDashesInNameUi = (callback: () => void = null, reload: boolean = true): JQueryPromise<any> => {
            return this.changeSpacesToDashesInName(callback, reload);
        }
        /** Presents a modal with input boxes to call the server method (ChangeSpacesToDashesInName). Depends on a modal existing with id #method-ChangeSpacesToDashesInName. */
        public changeSpacesToDashesInNameModal = (callback: () => void = null, reload: boolean = true) => {
            this.changeSpacesToDashesInNameUi(callback, reload);
        }
        

        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true) => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.personId;
            this.personId(data.personId);
            // Load the lists of other objects
            if (data.casesAssigned != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.casesAssigned, data.casesAssigned, 'caseKey', Case, this, allowCollectionDeletes);
            } 
            if (data.casesReported != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.casesReported, data.casesReported, 'caseKey', Case, this, allowCollectionDeletes);
            } 
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.
            if (!data.personStats) { 
                if (data.personStatsId != this.personStatsId()) {
                    this.personStats(null);
                }
            }else {
                if (!this.personStats()){
                    this.personStats(new PersonStats(data.personStats, this));
                }else{
                    this.personStats().loadFromDto(data.personStats);
                }
            }
            if (!data.company) { 
                if (data.companyId != this.companyId()) {
                    this.company(null);
                }
            }else {
                if (!this.company()){
                    this.company(new Company(data.company, this));
                }else{
                    this.company().loadFromDto(data.company);
                }
                if (this.parent && this.parent.myId == this.company().myId && Coalesce.Utilities.getClassName(this.parent) == Coalesce.Utilities.getClassName(this.company()))
                {
                    this.parent.loadFromDto(data.company, undefined, false);
                }
            }

            // The rest of the objects are loaded now.
            this.title(data.title);
            this.firstName(data.firstName);
            this.lastName(data.lastName);
            this.email(data.email);
            this.gender(data.gender);
            if (data.birthDate == null) this.birthDate(null);
            else if (this.birthDate() == null || !this.birthDate().isSame(moment(data.birthDate))){
                this.birthDate(moment(data.birthDate));
            }
            if (data.lastBath == null) this.lastBath(null);
            else if (this.lastBath() == null || !this.lastBath().isSame(moment(data.lastBath))){
                this.lastBath(moment(data.lastBath));
            }
            if (data.nextUpgrade == null) this.nextUpgrade(null);
            else if (this.nextUpgrade() == null || !this.nextUpgrade().isSame(moment(data.nextUpgrade))){
                this.nextUpgrade(moment(data.nextUpgrade));
            }
            this.personStatsId(data.personStatsId);
            this.timeZone(data.timeZone);
            this.name(data.name);
            this.companyId(data.companyId);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            this.validate();
        };

        /** Save the object into a DTO */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.personId = this.personId();

            dto.title = this.title();
            dto.firstName = this.firstName();
            dto.lastName = this.lastName();
            dto.email = this.email();
            dto.gender = this.gender();
            if (!this.birthDate()) dto.BirthDate = null;
            else dto.birthDate = this.birthDate().format('YYYY-MM-DDTHH:mm:ss');
            if (!this.lastBath()) dto.LastBath = null;
            else dto.lastBath = this.lastBath().format('YYYY-MM-DDTHH:mm:ss');
            if (!this.nextUpgrade()) dto.NextUpgrade = null;
            else dto.nextUpgrade = this.nextUpgrade().format('YYYY-MM-DDTHH:mm:ssZZ');
            dto.personStatsId = this.personStatsId();
            if (!dto.personStatsId && this.personStats()) {
                dto.personStatsId = this.personStats().personStatsId();
            }
            dto.timeZone = this.timeZone();
            dto.companyId = this.companyId();
            if (!dto.companyId && this.company()) {
                dto.companyId = this.company().companyId();
            }

            return dto;
        }


        constructor(newItem?: any, parent?: any){
            super();
            var self = this;
            self.parent = parent;
            self.myId;
            
            ko.validation.init({
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });

            // SetupValidation {
			self.firstName = self.firstName.extend({ minLength: 2, maxLength: 75 });
			self.lastName = self.lastName.extend({ minLength: 3, maxLength: 100 });
			self.birthDate = self.birthDate.extend({ moment: { unix: true },  });
			self.lastBath = self.lastBath.extend({ moment: { unix: true },  });
			self.nextUpgrade = self.nextUpgrade.extend({ moment: { unix: true },  });
			self.companyId = self.companyId.extend({ required: {params: true, message: "Company is required."} });
            
            self.errors = ko.validation.group([
                self.personId,
                self.title,
                self.firstName,
                self.lastName,
                self.email,
                self.gender,
                self.casesAssigned,
                self.casesReported,
                self.birthDate,
                self.lastBath,
                self.nextUpgrade,
                self.personStatsId,
                self.personStats,
                self.timeZone,
                self.name,
                self.companyId,
                self.company,
            ]);
            self.warnings = ko.validation.group([
            ]);

            // Computed Observable for edit URL
            self.editUrl = ko.computed(function() {
                return self.coalesceConfig.baseViewUrl() + self.viewController + "/CreateEdit?id=" + self.personId();
            });

            // Create computeds for display for objects
			self.personStatsText = ko.computed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.personStats() && self.personStats().personStatsId()) {
					return self.personStats().personStatsId().toString();
				} else {
					return "None";
				}
			});
			self.companyText = ko.computed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.company() && self.company().altName()) {
					return self.company().altName().toString();
				} else {
					return "None";
				}
			});

    
    	        dto.gender = self.gender();
            // List Object model for CasesAssigned. Allows for loading subsets of data.
            var _casesAssignedList: ListViewModels.CaseList = null;
            self.casesAssignedList = function(loadImmediate = true) {
                if (!_casesAssignedList){
                    _casesAssignedList = new ListViewModels.CaseList();
                    if (loadImmediate) loadCasesAssignedList();
                    self.personId.subscribe(loadCasesAssignedList)
                }
                return _casesAssignedList;
            }
            function loadCasesAssignedList() {
                if (self.personId()){
                    _casesAssignedList.queryString = "AssignedToId=" + self.personId();
                    _casesAssignedList.load();
                }
            }
            // List Object model for CasesReported. Allows for loading subsets of data.
            var _casesReportedList: ListViewModels.CaseList = null;
            self.casesReportedList = function(loadImmediate = true) {
                if (!_casesReportedList){
                    _casesReportedList = new ListViewModels.CaseList();
                    if (loadImmediate) loadCasesReportedList();
                    self.personId.subscribe(loadCasesReportedList)
                }
                return _casesReportedList;
            }
            function loadCasesReportedList() {
                if (self.personId()){
                    _casesReportedList.queryString = "ReportedById=" + self.personId();
                    _casesReportedList.load();
                }
            }

                self.gender.subscribe(self.autoSave);

            self.showCompanyEditor = function(callback: any) {
                if (!self.company()) {
                    self.company(new Company());
                }
                self.company().showEditor(callback)
            };

            // Load all child objects that are not loaded.
            self.loadChildren = function(callback) {
                var loadingCount = 0;
                // See if self.company needs to be loaded.
                if (self.company() == null && self.companyId() != null){
                    loadingCount++;
                    var companyObj = new Company();
                    companyObj.load(self.companyId(), function() {
                        loadingCount--;
                        self.company(companyObj);
                        if (loadingCount == 0 && $.isFunction(callback)){
                            callback();
                        }
                    });
                }
                if (loadingCount == 0 && $.isFunction(callback)){
                    callback();
                }
            };

            // This stuff needs to be done after everything else is set up.
            // Complex Type Observables

            self.title.subscribe(self.autoSave);
            self.firstName.subscribe(self.autoSave);
            self.lastName.subscribe(self.autoSave);
            self.email.subscribe(self.autoSave);
            self.gender.subscribe(self.autoSave);
            self.birthDate.subscribe(self.autoSave);
            self.lastBath.subscribe(self.autoSave);
            self.nextUpgrade.subscribe(self.autoSave);
            self.personStatsId.subscribe(self.autoSave);
            self.timeZone.subscribe(self.autoSave);
            self.companyId.subscribe(self.autoSave);
            self.company.subscribe(self.autoSave);
        
            if (newItem) {
                if ($.isNumeric(newItem)) self.load(newItem);
                else self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace Person {
        export enum TitleEnum {
            Mr = 0,
            Ms = 1,
            Mrs = 2,
            Miss = 4,
        };
        export enum GenderEnum {
            NonSpecified = 0,
            Male = 1,
            Female = 2,
        };

        // Classes for use in method calls to support data binding for input for arguments
        export class RenameArgs {
            public addition: KnockoutObservable<string> = ko.observable(null);
        }
    }
}